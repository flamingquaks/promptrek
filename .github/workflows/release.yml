name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write  # For PyPI trusted publishing

jobs:
  # Build the package once
  build:
    uses: ./.github/workflows/build.yml
    with:
      python-version: '3.12'
      upload-artifacts: true

  # Run comprehensive tests on the build
  test:
    needs: build
    uses: ./.github/workflows/test.yml
    with:
      python-version: '3.12'
      test-suite: 'all'
      coverage: true
      coverage-threshold: 80
      artifact-name: ${{ needs.build.outputs.artifact-name }}

  # Security validation before release
  # security:
  #   needs: build
  #   uses: ./.github/workflows/security.yml
  #   with:
  #     python-version: '3.12'
  #     bandit-severity: 'medium'
  #     fail-on-issues: true  # Strict security for releases

  # Validate package with twine
  validate-package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: '3.12'
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist/

      - name: Install twine
        run: |
          uv add --group dev twine
          uv sync --group dev

      - name: Check package with twine
        run: |
          uv run twine check dist/*
          echo "Package validation successful"

  # Create GitHub release - only for main PyPI releases
  github-release:
    needs: [build, test, validate-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js for changelog
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Install conventional-changelog
        run: |
          npm install -g conventional-changelog-cli conventional-commits-parser

      - name: Generate release notes
        run: |
          # Generate release notes from git history using conventional commits
          conventional-changelog -p angular -s -r 1 > RELEASE_NOTES.md || \
            echo "Release notes generated from conventional commits" > RELEASE_NOTES.md

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI (using the same artifacts) - only for non-RC releases
  publish-pypi:
    needs: [build, test, validate-package, github-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
    environment:
      name: pypi
      url: https://pypi.org/project/promptrek/

    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verify-metadata: true

  # Publish to Test PyPI for RC, beta, and alpha releases
  publish-test-pypi:
    needs: [build, test, validate-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && (contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha'))
    environment:
      name: testpypi
      url: https://test.pypi.org/project/promptrek/

    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true
          verify-metadata: true
          skip-existing: true  # Skip if version already exists

  # Final success check
  release-success:
    needs: [build, test, validate-package]
    runs-on: ubuntu-latest
    if: always() && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Check Release Status
        run: |
          echo "## Release Summary"

          # Check based on what type of release this is
          if [[ "${{ github.ref }}" == *"rc"* ]] || [[ "${{ github.ref }}" == *"beta"* ]] || [[ "${{ github.ref }}" == *"alpha"* ]]; then
            # For pre-releases, only Test PyPI should run
            echo "Pre-release to Test PyPI"
            echo "Build: ${{ needs.build.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Validate: ${{ needs.validate-package.result }}"

            if [ "${{ needs.build.result }}" != "success" ] || \
               [ "${{ needs.test.result }}" != "success" ] || \
               [ "${{ needs.validate-package.result }}" != "success" ]; then
              echo "Pre-release preparation failed"
              exit 1
            fi
            echo "Pre-release to Test PyPI ready! ðŸš€"
          else
            # For regular releases, check all components
            echo "Full release to PyPI"
            echo "Build: ${{ needs.build.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Validate: ${{ needs.validate-package.result }}"

            if [ "${{ needs.build.result }}" != "success" ] || \
               [ "${{ needs.test.result }}" != "success" ] || \
               [ "${{ needs.validate-package.result }}" != "success" ]; then
              echo "Release preparation failed"
              exit 1
            fi
            echo "Release to PyPI ready! ðŸŽ‰"
          fi
