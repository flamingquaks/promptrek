name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history for better diffs
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Check code formatting
      run: |
        echo "Checking black formatting..."
        uv run black --check --diff src/ tests/
    
    - name: Check import sorting
      run: |
        echo "Checking import order..."
        uv run isort --check-only --diff src/ tests/
    
    - name: Run linter
      run: |
        echo "Running flake8..."
        uv run flake8 src/ tests/
      continue-on-error: true
    
    - name: Run tests with coverage
      run: |
        echo "Running tests..."
        uv run pytest tests/ --cov=src/promptrek --cov-report=term-missing --cov-fail-under=80
    
    - name: Test CLI functionality
      run: |
        echo "Testing CLI commands..."
        # Test basic CLI commands work
        uv run promptrek --help
        uv run promptrek list-editors
        
        # Test init command with basic template and output
        uv run promptrek init --template basic --output test-project.promptrek.yaml
        
        # Test validate command
        uv run promptrek validate test-project.promptrek.yaml
        
        # Test generate command (dry-run)
        uv run promptrek generate --all --dry-run test-project.promptrek.yaml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install security tools
      run: |
        uv add --group dev bandit safety
        uv sync --group dev
    
    - name: Security scan with bandit
      run: |
        uv run bandit -r src/ -ll
    
    - name: Check for known vulnerabilities
      run: |
        uv run safety check

  comprehensive-tests:
    runs-on: ubuntu-latest
    # Run comprehensive tests for all PRs to ensure quality
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run comprehensive test matrix (single platform)
      run: |
        echo "Running comprehensive tests on single platform for PR validation..."
        uv run pytest tests/ -v --cov=src/promptrek --cov-report=term-missing --cov-fail-under=80
        
        # Test CLI functionality
        uv run promptrek --help
        uv run promptrek list-editors
        uv run promptrek init --template basic --output test-pr.promptrek.yaml
        uv run promptrek validate test-pr.promptrek.yaml
        uv run promptrek generate --all --dry-run test-pr.promptrek.yaml

  docs-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies (for CLI testing)
      run: |
        uv sync --group dev
    
    - name: Check documentation files
      run: |
        echo "Checking for required documentation files..."
        test -f README.md || (echo "README.md missing" && exit 1)
        test -f GETTING_STARTED.md || (echo "GETTING_STARTED.md missing" && exit 1)
        test -d docs || (echo "docs directory missing" && exit 1)
    
    - name: Test uvx functionality in docs
      run: |
        echo "Testing uvx commands from documentation..."
        uvx --from . promptrek --help
    
    - name: Check for placeholder content
      run: |
        echo "Checking for placeholder content..."
        ! grep -r "TODO" docs/ || (echo "Found TODO items in docs" && exit 1)
        ! grep -r "FIXME" src/ tests/ || echo "Warning: Found FIXME items in code"
