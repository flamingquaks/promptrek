name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Quick build check
  build:
    uses: ./.github/workflows/build.yml
    with:
      python-version: "3.11"
      upload-artifacts: true

  # Fast tests on primary platform
  test-fast:
    needs: build
    uses: ./.github/workflows/test.yml
    with:
      python-version: "3.11"
      os: "ubuntu-latest"
      test-suite: "all"
      coverage: true
      coverage-threshold: 80
      artifact-name: ${{ needs.build.outputs.artifact-name }}

  # Code quality checks (parallel with tests)
  code-quality:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: "3.11"
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-pr-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-pr-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --all-groups

      - name: Check code formatting
        id: formatting
        run: |
          echo "Checking black formatting..."
          if uv run black --check --diff src/ tests/; then
            echo "formatting_issues=false" >> $GITHUB_OUTPUT
          else
            echo "formatting_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Check import sorting
        id: imports
        run: |
          echo "Checking import order..."
          uv run isort --check-only --diff src/ tests/ || echo "import_issues=true" >> $GITHUB_OUTPUT

      - name: Run linter
        id: linter
        run: |
          echo "Running flake8..."
          uv run flake8 src/ tests/ || echo "lint_issues=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Type checking
        id: typecheck
        run: |
          echo "Running mypy..."
          uv run mypy src/ || echo "type_issues=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate PR comment
        if: steps.formatting.outputs.formatting_issues || steps.imports.outputs.import_issues
        uses: actions/github-script@v8
        with:
          script: |
            const issues = [];
            if ('${{ steps.formatting.outputs.formatting_issues }}' === 'true') {
              issues.push('- Code formatting (run `uv run black src/ tests/`)');
            }
            if ('${{ steps.imports.outputs.import_issues }}' === 'true') {
              issues.push('- Import sorting (run `uv run isort src/ tests/`)');
            }

            if (issues.length > 0) {
              const body = `## Code Quality Issues

            Please fix the following issues:
            ${issues.join('\n')}

            You can fix these automatically by running:
            \`\`\`bash
            uv run black src/ tests/
            uv run isort src/ tests/
            \`\`\``;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Security scan for PRs
  security:
    uses: ./.github/workflows/security.yml
    with:
      python-version: "3.11"
      bandit-severity: "low" # More lenient for PRs
      fail-on-issues: false

  # CLI functionality test
  cli-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: "3.11"
          cache-dependency-glob: "pyproject.toml"

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: dist/

      - name: Install from artifacts
        run: |
          uv pip install --system dist/*.whl

      - name: Test CLI commands
        env:
          PYTHONIOENCODING: utf-8
        run: |
          echo "Testing CLI functionality..."
          promptrek --help
          promptrek init --template basic --output test-pr.promptrek.yaml
          promptrek validate test-pr.promptrek.yaml
          promptrek generate --all --dry-run test-pr.promptrek.yaml

  # Documentation validation
  docs-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Check documentation
        run: |
          echo "Checking for required documentation files..."
          test -f README.md || (echo "README.md missing" && exit 1)
          test -f GETTING_STARTED.md || (echo "GETTING_STARTED.md missing" && exit 1)
          test -d docs || (echo "docs directory missing" && exit 1)

      - name: Check for placeholder content
        run: |
          echo "Checking for placeholder content..."
          ! grep -r "TODO" docs/ README.md GETTING_STARTED.md || echo "Warning: Found TODO items in documentation"
          ! grep -r "FIXME" src/ tests/ || echo "Warning: Found FIXME items in code"

  # PR validation summary
  pr-status:
    needs: [build, test-fast, code-quality, security, cli-test, docs-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: PR Validation Summary
        uses: actions/github-script@v8
        with:
          script: |
            const results = {
              'Build': '${{ needs.build.result }}',
              'Tests': '${{ needs.test-fast.result }}',
              'Code Quality': '${{ needs.code-quality.result }}',
              'Security': '${{ needs.security.result }}',
              'CLI Test': '${{ needs.cli-test.result }}',
              'Documentation': '${{ needs.docs-check.result }}'
            };

            const failed = Object.entries(results)
              .filter(([_, status]) => status === 'failure')
              .map(([name, _]) => name);

            const passed = Object.entries(results)
              .filter(([_, status]) => status === 'success')
              .map(([name, _]) => name);

            let status = '✅';
            let summary = 'All checks passed!';

            if (failed.length > 0) {
              status = '❌';
              summary = `Some checks failed: ${failed.join(', ')}`;
            }

            const body = `## PR Validation Summary ${status}

            ${summary}

            | Check | Status |
            |-------|--------|
            ${Object.entries(results).map(([name, status]) => {
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
              return `| ${name} | ${emoji} ${status} |`;
            }).join('\n')}`;

            // Only post comment if there are failures
            if (failed.length > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

            // Fail the check if critical jobs failed
            if (results['Build'] === 'failure' || results['Tests'] === 'failure') {
              core.setFailed('PR validation failed');
            }
