name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 8 * * 1'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build once and share artifacts
  build:
    uses: ./.github/workflows/build.yml
    with:
      python-version: '3.11'
      upload-artifacts: true

  # Test matrix using build artifacts
  test-matrix:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    uses: ./.github/workflows/test.yml
    with:
      os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}
      test-suite: 'all'
      coverage: true
      coverage-threshold: 0  # Don't fail on coverage in matrix tests
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      upload-coverage: true

  # Quick tests for primary configuration
  test-primary:
    needs: build
    uses: ./.github/workflows/test.yml
    with:
      python-version: '3.11'
      test-suite: 'all'
      coverage: true
      coverage-threshold: 80
      artifact-name: ${{ needs.build.outputs.artifact-name }}

  # Security scanning (parallel with tests)
  security:
    uses: ./.github/workflows/security.yml
    with:
      python-version: '3.11'
      bandit-severity: 'medium'
      fail-on-issues: false  # Don't fail CI on security issues for now

  # Validate each commit can build (for PRs)
  validate-commits:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Validate Each Commit Builds

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Get commits to validate
      id: commits
      run: |
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        echo "Validating PR commits from ${BASE_SHA} to ${HEAD_SHA}"
        git rev-list --reverse ${BASE_SHA}..${HEAD_SHA} > commits_to_check.txt

        COMMIT_COUNT=$(wc -l < commits_to_check.txt)
        echo "Found ${COMMIT_COUNT} commits to validate"

        if [ ${COMMIT_COUNT} -eq 0 ]; then
          echo "skip_validation=true" >> $GITHUB_OUTPUT
        else
          echo "skip_validation=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate each commit
      if: steps.commits.outputs.skip_validation == 'false'
      run: |
        FAILED_COMMITS=""
        TOTAL_COMMITS=$(wc -l < commits_to_check.txt)
        CURRENT=0

        while IFS= read -r commit_sha; do
          CURRENT=$((CURRENT + 1))
          echo "Validating commit ${CURRENT}/${TOTAL_COMMITS}: ${commit_sha}"

          git checkout ${commit_sha} --quiet
          rm -rf dist/ build/ *.egg-info/ || true

          if ! uv sync --all-groups --quiet; then
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: Dependency installation failed"
            continue
          fi

          if ! uv build --quiet; then
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: Build failed"
            continue
          fi

          if [ ! -d "dist/" ] || [ -z "$(ls -A dist/ 2>/dev/null)" ]; then
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: No build artifacts"
          fi
        done < commits_to_check.txt

        git checkout ${{ github.event.pull_request.head.sha }} --quiet

        if [ -n "${FAILED_COMMITS}" ]; then
          echo "The following commits failed to build:"
          echo -e "${FAILED_COMMITS}"
          exit 1
        else
          echo "All ${TOTAL_COMMITS} commits build successfully"
        fi

  # Summary job to ensure all checks pass
  ci-success:
    needs: [build, test-primary, test-matrix, security]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check CI Status
      run: |
        echo "## CI Summary"
        echo "Build: ${{ needs.build.result }}"
        echo "Primary Tests: ${{ needs.test-primary.result }}"
        echo "Test Matrix: ${{ needs.test-matrix.result }}"
        echo "Security: ${{ needs.security.result }}"

        if [ "${{ needs.build.result }}" != "success" ] || \
           [ "${{ needs.test-primary.result }}" != "success" ]; then
          echo "CI failed due to critical job failures"
          exit 1
        fi

        echo "CI completed successfully"