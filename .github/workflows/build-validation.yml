name: Build Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:  
  validate-commit-builds:
    runs-on: ubuntu-latest
    name: Validate Each Commit Can Build
    
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history to validate all commits in PR/push
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Get commits to validate  
      id: commits
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, validate commits between base and head
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          echo "Validating PR commits from ${BASE_SHA} to ${HEAD_SHA}"
          git rev-list --reverse ${BASE_SHA}..${HEAD_SHA} > commits_to_check.txt
        else
          # For pushes, validate the pushed commits  
          echo "Validating pushed commits from ${{ github.event.before }} to ${{ github.event.after }}"
          git rev-list --reverse ${{ github.event.before }}..${{ github.event.after }} > commits_to_check.txt
        fi
        
        COMMIT_COUNT=$(wc -l < commits_to_check.txt)
        echo "Found ${COMMIT_COUNT} commits to validate"
        
        if [ ${COMMIT_COUNT} -eq 0 ]; then
          echo "No commits to validate"
          echo "skip_validation=true" >> $GITHUB_OUTPUT
        else
          echo "Commits to validate:"
          cat commits_to_check.txt
          echo "skip_validation=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate each commit can build
      if: steps.commits.outputs.skip_validation == 'false'
      run: |
        echo "üîç Validating that each commit can build successfully..."
        
        FAILED_COMMITS=""
        TOTAL_COMMITS=$(wc -l < commits_to_check.txt)
        CURRENT=0
        
        while IFS= read -r commit_sha; do
          CURRENT=$((CURRENT + 1))
          echo ""
          echo "=== üì¶ Validating commit ${CURRENT}/${TOTAL_COMMITS}: ${commit_sha} ==="
          
          # Get commit info for better reporting
          COMMIT_MSG=$(git log --format="%s" -n 1 ${commit_sha})
          COMMIT_AUTHOR=$(git log --format="%an" -n 1 ${commit_sha})
          echo "üìù ${COMMIT_MSG} (by ${COMMIT_AUTHOR})"
          
          # Checkout the specific commit
          git checkout ${commit_sha} --quiet
          
          # Clean previous build artifacts
          rm -rf dist/ build/ *.egg-info/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/ || true
          
          # Install dependencies for this commit
          echo "üì¶ Installing dependencies..."
          if ! uv sync --group dev --quiet; then
            echo "‚ùå Failed to install dependencies for commit ${commit_sha}"
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: Dependency installation failed"
            continue
          fi
          
          # Test build
          echo "üî® Testing build..."  
          echo "Current directory: $(pwd)"
          echo "Checking for pyproject.toml: $(ls -la pyproject.toml 2>/dev/null || echo 'not found')"
          if uv build --quiet; then
            echo "‚úÖ Build succeeded for commit ${commit_sha}"
          else
            echo "‚ùå Build failed for commit ${commit_sha}"
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: Build failed"
            continue
          fi
          
          # Verify build artifacts
          if [ -d "dist/" ] && [ "$(ls -A dist/ 2>/dev/null)" ]; then
            ARTIFACT_COUNT=$(ls -1 dist/ | wc -l)
            echo "‚úÖ Created ${ARTIFACT_COUNT} build artifact(s)"
          else
            echo "‚ùå No build artifacts created for commit ${commit_sha}"
            FAILED_COMMITS="${FAILED_COMMITS}\n- ${commit_sha}: No build artifacts"
          fi
          
        done < commits_to_check.txt
        
        # Return to HEAD
        git checkout ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }} --quiet
        
        # Report final results
        echo ""
        if [ -n "${FAILED_COMMITS}" ]; then
          echo "‚ùå BUILD VALIDATION FAILED"
          echo "The following commits failed to build:"
          echo -e "${FAILED_COMMITS}"
          echo ""
          echo "üí° Each commit in a PR should be buildable to maintain bisectability."
          exit 1
        else
          echo "‚úÖ BUILD VALIDATION PASSED"  
          echo "All ${TOTAL_COMMITS} commits can be built successfully! üéâ"
        fi

  test-build-methods:
    runs-on: ubuntu-latest
    name: Test All Build Methods
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --group dev
    
    - name: Test uv build
      run: |
        echo "üî® Testing uv build..."
        make clean
        uv build
        
        echo "üì¶ Build artifacts:"
        ls -la dist/
        
        # Verify wheel structure
        for wheel in dist/*.whl; do
          if [ -f "$wheel" ]; then
            echo "üîç Checking wheel contents: $(basename "$wheel")"
            python -m zipfile -l "$wheel" | grep -E "(promptrek|\.py)" | head -10
          fi
        done
    
    - name: Test Makefile build (with uv available)
      run: |
        echo "üî® Testing Makefile build..."
        make clean
        make build
        
        echo "üì¶ Build artifacts:"
        ls -la dist/
    
    - name: Test script.sh build
      run: |
        echo "üî® Testing script.sh build..."
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Checking if pyproject.toml exists:"
        ls -la pyproject.toml || echo "pyproject.toml not found"
        
        ./script.sh clean
        ./script.sh build
        
        echo "üì¶ Build artifacts:"
        ls -la dist/
    
    - name: Validate final build artifacts
      run: |
        echo "üîç Final validation of build artifacts..."
        
        if [ ! -d "dist/" ]; then
          echo "‚ùå No dist/ directory found"
          exit 1
        fi
        
        WHEEL_COUNT=$(ls -1 dist/*.whl 2>/dev/null | wc -l)
        if [ ${WHEEL_COUNT} -eq 0 ]; then
          echo "‚ùå No wheel files found in dist/"
          exit 1
        fi
        
        echo "‚úÖ Found ${WHEEL_COUNT} wheel file(s)"
        
        # Test that wheel is installable (basic check)
        python -m pip install --user --force-reinstall dist/*.whl
        echo "‚úÖ Wheel can be installed"
        
        # Test basic import
        python -c "import promptrek; print('‚úÖ Package can be imported')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: validated-build-artifacts
        path: dist/
        retention-days: 7