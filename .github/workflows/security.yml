name: Reusable Security Workflow

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      bandit-severity:
        required: false
        type: string
        default: 'medium'  # Options: low, medium, high
      fail-on-issues:
        required: false
        type: boolean
        default: false

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python ${{ inputs.python-version }}
      run: uv python install ${{ inputs.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-security-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-security-${{ inputs.python-version }}-
          ${{ runner.os }}-uv-security-

    - name: Install security tools
      run: |
        uv add --group dev bandit safety pip-audit
        uv sync --group dev

    - name: Run Bandit security linter
      id: bandit
      run: |
        echo "Running Bandit security analysis..."

        # Set severity level
        if [ "${{ inputs.bandit-severity }}" = "high" ]; then
          SEVERITY="-lll"
        elif [ "${{ inputs.bandit-severity }}" = "medium" ]; then
          SEVERITY="-ll"
        else
          SEVERITY="-l"
        fi

        # Run bandit and capture results
        uv run bandit -r src/ ${SEVERITY} -f json -o bandit-report.json || true

        # Also display human-readable output
        uv run bandit -r src/ ${SEVERITY} || true

        # Check if we should fail on issues
        if [ "${{ inputs.fail-on-issues }}" = "true" ]; then
          # Parse JSON to check for issues
          if [ -f bandit-report.json ]; then
            ISSUE_COUNT=$(python -c "import json; data = json.load(open('bandit-report.json')); print(len(data.get('results', [])))" 2>/dev/null || echo "0")
            if [ "$ISSUE_COUNT" -gt "0" ]; then
              echo "Found $ISSUE_COUNT security issues"
              exit 1
            fi
          fi
        fi

    - name: Check for known vulnerabilities with Safety
      id: safety
      run: |
        echo "Checking for known vulnerabilities in dependencies..."
        uv run safety check --json --output safety-report.json || true
        uv run safety check || true

        # Check if we should fail on issues
        if [ "${{ inputs.fail-on-issues }}" = "true" ]; then
          # Check exit code of safety check
          uv run safety check || exit 1
        fi
      continue-on-error: ${{ !inputs.fail-on-issues }}

    - name: Run pip-audit for dependency vulnerabilities
      id: pip-audit
      run: |
        echo "Running pip-audit for dependency vulnerabilities..."
        uv run pip-audit || true

        # Check if we should fail on issues
        if [ "${{ inputs.fail-on-issues }}" = "true" ]; then
          uv run pip-audit || exit 1
        fi
      continue-on-error: ${{ !inputs.fail-on-issues }}

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
        if-no-files-found: ignore

    - name: Security scan summary
      if: always()
      run: |
        echo "## Security Scan Summary"
        echo ""

        if [ -f bandit-report.json ]; then
          BANDIT_ISSUES=$(python -c "import json; data = json.load(open('bandit-report.json')); print(len(data.get('results', [])))" 2>/dev/null || echo "0")
          echo "- Bandit: Found $BANDIT_ISSUES potential security issues"
        fi

        if [ -f safety-report.json ]; then
          echo "- Safety: Vulnerability check completed"
        fi

        echo ""
        echo "Security scan completed. Check artifacts for detailed reports."
