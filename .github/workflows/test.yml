name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      os:
        required: false
        type: string
        default: 'ubuntu-latest'
      test-suite:
        required: false
        type: string
        default: 'all'  # Options: all, unit, integration, cli
      coverage:
        required: false
        type: boolean
        default: true
      coverage-threshold:
        required: false
        type: number
        default: 80
      artifact-name:
        required: false
        type: string
        default: ''  # If provided, download and test with artifacts
      upload-coverage:
        required: false
        type: boolean
        default: true

jobs:
  test:
    runs-on: ${{ inputs.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python ${{ inputs.python-version }} (Actions)
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up Python ${{ inputs.python-version }} (UV)
      continue-on-error: true
      run: |
        echo "Installing Python ${{ inputs.python-version }} with uv..."
        uv python install ${{ inputs.python-version }}
        echo "Python installation completed."

    - name: Create virtual environment
      run: |
        echo "Creating virtual environment..."
        echo "UV version: $(uv --version)"
        echo "Available Python installations:"
        uv python list
        echo "System Python version:"
        python --version
        echo "System Python path:"
        which python || where python

        # Try to create virtual environment with system Python first
        echo "Creating virtual environment with system Python..."
        uv venv

    - name: Verify environment setup
      shell: bash
      run: |
        echo "Verifying environment setup..."
        echo "Current directory: $(pwd)"
        echo "Virtual environment contents:"
        if [ -d ".venv" ]; then
          ls -la .venv/
          if [ "${{ inputs.os }}" = "windows-latest" ]; then
            echo "Windows Python executable:"
            ls -la .venv/Scripts/ || echo "No Scripts directory"
          else
            echo "Unix Python executable:"
            ls -la .venv/bin/ || echo "No bin directory"
          fi
        else
          echo "No .venv directory found"
        fi

        echo "UV python list:"
        uv python list

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ inputs.os }}-uv-${{ inputs.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          ${{ inputs.os }}-uv-${{ inputs.python-version }}-
          ${{ inputs.os }}-uv-

    - name: Download build artifacts
      if: inputs.artifact-name != ''
      uses: actions/download-artifact@v5
      with:
        name: ${{ inputs.artifact-name }}
        path: dist/

    - name: Install from artifacts
      if: inputs.artifact-name != ''
      shell: bash
      run: |
        echo "Installing from downloaded artifacts..."
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la || dir
        echo "Dist directory contents:"
        ls -la dist/ || dir dist

        # Find wheel file
        if [ "${{ inputs.os }}" = "windows-latest" ]; then
          # Windows approach
          WHEEL_FILE=$(find dist -name "*.whl" | head -1)
        else
          # Unix approach
          WHEEL_FILE=$(ls dist/*.whl | head -1)
        fi

        if [ -f "$WHEEL_FILE" ]; then
          echo "Installing wheel: $WHEEL_FILE"
          # Try with system pip first as fallback
          python -m pip install "$WHEEL_FILE" || uv pip install "$WHEEL_FILE"
        else
          echo "No wheel file found in dist/"
          echo "Available files in dist/:"
          ls -la dist/ || dir dist
          exit 1
        fi

        echo "Syncing dependencies..."
        # Try uv sync first, fallback to pip install if it fails
        if ! uv sync --all-groups; then
          echo "uv sync failed, trying pip install as fallback..."
          python -m pip install -e ".[dev]"
        fi

    - name: Install dependencies
      if: inputs.artifact-name == ''
      run: |
        echo "Installing dependencies..."
        # Try uv sync first, fallback to pip install if it fails
        if ! uv sync --all-groups; then
          echo "uv sync failed, trying pip install as fallback..."
          python -m pip install -e ".[dev]"
        fi

    - name: Check formatting with Black
      if: inputs.test-suite == 'all' || inputs.test-suite == 'lint'
      run: uv run black --check src/ tests/ || python -m black --check src/ tests/
      continue-on-error: true

    - name: Check import sorting with isort
      if: inputs.test-suite == 'all' || inputs.test-suite == 'lint'
      run: uv run isort --check-only src/ tests/ || python -m isort --check-only src/ tests/
      continue-on-error: true

    - name: Lint with flake8
      if: inputs.test-suite == 'all' || inputs.test-suite == 'lint'
      run: uv run flake8 src/ tests/ || python -m flake8 src/ tests/
      continue-on-error: true

    - name: Type check with mypy
      if: inputs.test-suite == 'all' || inputs.test-suite == 'lint'
      run: uv run mypy src/ || python -m mypy src/
      continue-on-error: true
    - name: Run unit tests
      if: inputs.test-suite == 'all' || inputs.test-suite == 'unit'
      shell: bash
      run: |
        if [ "${{ inputs.coverage }}" = "true" ]; then
          uv run pytest tests/unit/ -v --tb=short --cov=src/promptrek --cov-report=xml --cov-report=term-missing || \
          python -m pytest tests/unit/ -v --tb=short --cov=src/promptrek --cov-report=xml --cov-report=term-missing
        else
          uv run pytest tests/unit/ -v --tb=short --override-ini="addopts=" || \
          python -m pytest tests/unit/ -v --tb=short --override-ini="addopts="
        fi

    - name: Run integration tests
      if: inputs.test-suite == 'all' || inputs.test-suite == 'integration'
      shell: bash
      run: |
        if [ "${{ inputs.coverage }}" = "true" ]; then
          uv run pytest tests/integration/ -v --tb=short --cov=src/promptrek --cov-append --cov-report=xml --cov-report=term-missing || \
          python -m pytest tests/integration/ -v --tb=short --cov=src/promptrek --cov-append --cov-report=xml --cov-report=term-missing
        else
          uv run pytest tests/integration/ -v --tb=short --override-ini="addopts=" || \
          python -m pytest tests/integration/ -v --tb=short --override-ini="addopts="
        fi

    - name: Run all tests with coverage
      if: inputs.test-suite == 'all' && inputs.coverage
      run: |
        uv run pytest tests/ --cov=src/promptrek --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ inputs.coverage-threshold }} || \
        python -m pytest tests/ --cov=src/promptrek --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ inputs.coverage-threshold }}
      continue-on-error: ${{ inputs.coverage-threshold == 0 }}

    - name: Test CLI functionality
      if: inputs.test-suite == 'all' || inputs.test-suite == 'cli'
      shell: bash
      env:
        PYTHONIOENCODING: utf-8
        LC_ALL: en_US.UTF-8
        LANG: en_US.UTF-8
      run: |
        echo "Testing CLI commands..."
        uv run promptrek --help || python -m promptrek --help

        # Skip list-editors on Windows due to Unicode encoding issues
        if [ "${{ inputs.os }}" != "windows-latest" ]; then
          uv run promptrek list-editors || python -m promptrek list-editors
        else
          echo "Skipping list-editors on Windows due to Unicode encoding"
        fi

        uv run promptrek init --template basic --output test.promptrek.yaml || \
        python -m promptrek init --template basic --output test.promptrek.yaml

        uv run promptrek validate test.promptrek.yaml || \
        python -m promptrek validate test.promptrek.yaml

        uv run promptrek generate --all --dry-run test.promptrek.yaml || \
        python -m promptrek generate --all --dry-run test.promptrek.yaml

        # Test uvx functionality if not on Windows
        if [ "${{ inputs.os }}" != "windows-latest" ]; then
          uvx --from . promptrek --help || echo "uvx test skipped due to error"
        fi

    - name: Upload coverage reports
      if: inputs.coverage && inputs.upload-coverage && (inputs.test-suite == 'all' || inputs.test-suite == 'unit' || inputs.test-suite == 'integration')
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
        flags: ${{ inputs.test-suite }}
        name: ${{ inputs.os }}-py${{ inputs.python-version }}
