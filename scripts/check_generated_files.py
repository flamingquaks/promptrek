#!/usr/bin/env python3
"""
Pre-commit hook to prevent committing generated prompt files.

This script checks if any of the files being committed are generated by promptrek
and should not be committed to the repository.
"""

import os
import sys
from pathlib import Path
from typing import List, Set

# Patterns for generated files that should not be committed
GENERATED_FILE_PATTERNS = {
    # GitHub Copilot files
    ".github/copilot-instructions.md",
    ".github/instructions/*.instructions.md",
    ".github/prompts/*.prompt.md",
    # Cursor files
    ".cursorrules",
    ".cursor/rules/*.mdc",
    ".cursorignore",
    ".cursorindexingignore",
    "AGENTS.md",
    # Continue files
    "config.yaml",  # Only at root level for Continue
    ".continue/config.json",
    ".continue/rules/*.md",
    # Claude files
    ".claude/*.md",
    "CLAUDE.md",
    # Cline files
    ".clinerules/*.md",
    # Windsurf files
    ".windsurf/rules/*.md",
    # Kiro files
    ".kiro/steering/*.md",
    ".kiro/specs/*.md",
    # Amazon Q files
    ".amazonq/rules/*.md",
    ".amazonq/cli-agents/*.json",
    # JetBrains AI files
    ".assistant/rules/*.md",
}


def matches_pattern(file_path: str, pattern: str) -> bool:
    """Check if a file path matches a pattern (supports simple wildcards)."""
    path = Path(file_path)
    pattern_path = Path(pattern)

    # Direct match
    if str(path) == pattern or str(path) == pattern.rstrip("/"):
        return True

    # Directory match
    if pattern.endswith("/"):
        return str(path).startswith(pattern) or any(
            parent.name == pattern.rstrip("/") for parent in path.parents
        )

    # Wildcard match
    if "*" in pattern:
        pattern_parts = pattern.split("/")
        path_parts = str(path).split("/")

        if len(pattern_parts) != len(path_parts):
            return False

        for pattern_part, path_part in zip(pattern_parts, path_parts):
            if pattern_part == "*":
                continue
            elif pattern_part.endswith("*"):
                if not path_part.startswith(pattern_part[:-1]):
                    return False
            elif pattern_part.startswith("*"):
                if not path_part.endswith(pattern_part[1:]):
                    return False
            elif "*" in pattern_part:
                # Simple wildcard matching
                prefix, suffix = pattern_part.split("*", 1)
                if not (path_part.startswith(prefix) and path_part.endswith(suffix)):
                    return False
            elif pattern_part != path_part:
                return False
        return True

    return False


def is_generated_file(file_path: str) -> bool:
    """Check if a file appears to be generated by promptrek."""
    for pattern in GENERATED_FILE_PATTERNS:
        if matches_pattern(file_path, pattern):
            return True
    return False


def check_files(file_paths: List[str]) -> List[str]:
    """Check which files are generated and should not be committed."""
    generated_files = []

    for file_path in file_paths:
        if is_generated_file(file_path):
            generated_files.append(file_path)

    return generated_files


def main() -> int:
    """Main entry point for the pre-commit hook."""
    if len(sys.argv) < 2:
        # No files to check
        return 0

    files_to_check = sys.argv[1:]
    generated_files = check_files(files_to_check)

    if generated_files:
        print("❌ ERROR: Attempting to commit generated prompt files!")
        print(
            "\nThe following files appear to be generated by promptrek and should not be committed:"
        )
        for file_path in generated_files:
            print(f"  - {file_path}")

        print(
            "\n💡 These files are generated from .promptrek.yaml files and should be:"
        )
        print("   • Added to .gitignore")
        print("   • Generated locally as needed")
        print("   • Not committed to version control")

        print("\nTo fix this:")
        print("1. Remove these files from staging: git reset HEAD <file>")
        print("2. Add them to .gitignore if not already there")
        print("3. Commit only your .promptrek.yaml source files")

        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
