# yaml-language-server: $schema=https://promptrek.ai/schema/v3.0.0.json
schema_version: 3.1.0
metadata:
  title: Node.js REST API
  description: AI coding assistant configuration for Node.js REST API projects
  version: 1.0.0
  author: PrompTrek
  tags:
    - nodejs
    - typescript
    - api
    - backend

content: |
  # Node.js REST API Development Guide

  ## Project Overview
  This is a Node.js REST API built with TypeScript and modern best practices.

  **Tech Stack:**
  - Node.js 20+ with TypeScript
  - Express.js for routing
  - PostgreSQL with Prisma ORM
  - JWT for authentication
  - Zod for validation

  ## Code Style Guidelines

  ### API Structure
  - Use RESTful conventions (GET, POST, PUT, DELETE)
  - Return consistent response formats
  - Use proper HTTP status codes
  - Implement versioning (e.g., /api/v1/)

  ### TypeScript Best Practices
  - Enable strict mode
  - Define request/response types
  - Use interfaces for data models
  - Avoid `any` - use `unknown` or proper types

  ### File Organization
  ```
  src/
    routes/         # API route handlers
    controllers/    # Business logic
    services/       # External service integrations
    models/         # Database models
    middleware/     # Express middleware
    utils/          # Utility functions
    types/          # TypeScript type definitions
  ```

  ## Route Handler Example

  ```typescript
  // routes/users.ts
  import { Router } from 'express';
  import { createUser, getUser } from '../controllers/users';
  import { authenticate } from '../middleware/auth';
  import { validateRequest } from '../middleware/validation';
  import { createUserSchema } from '../schemas/user';

  const router = Router();

  router.post(
    '/users',
    authenticate,
    validateRequest(createUserSchema),
    createUser
  );

  router.get('/users/:id', authenticate, getUser);

  export default router;
  ```

  ## Controller Example

  ```typescript
  // controllers/users.ts
  import { Request, Response } from 'express';
  import { UserService } from '../services/user';
  import { CreateUserInput } from '../types/user';

  export async function createUser(req: Request, res: Response) {
    try {
      const input: CreateUserInput = req.body;
      const user = await UserService.create(input);

      res.status(201).json({
        success: true,
        data: user,
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message,
      });
    }
  }
  ```

  ## Validation Example

  ```typescript
  // schemas/user.ts
  import { z } from 'zod';

  export const createUserSchema = z.object({
    body: z.object({
      email: z.string().email(),
      name: z.string().min(2).max(100),
      password: z.string().min(8),
    }),
  });

  export type CreateUserInput = z.infer<typeof createUserSchema>['body'];
  ```

  ## Error Handling
  - Use centralized error handling middleware
  - Return consistent error response format
  - Log errors with appropriate severity levels
  - Never expose sensitive information in error messages

  ## Security
  - Validate all user inputs with Zod
  - Use parameterized queries to prevent SQL injection
  - Implement rate limiting for API endpoints
  - Use CORS properly for frontend access
  - Hash passwords with bcrypt (min 10 rounds)
  - Use JWT tokens with short expiration times

  ## Testing
  - Use Jest for unit and integration tests
  - Use Supertest for API endpoint testing
  - Mock external dependencies
  - Test error scenarios and edge cases
  - Aim for >80% code coverage

  ## Performance
  - Use connection pooling for database
  - Implement caching where appropriate (Redis)
  - Add database indexes for frequently queried fields
  - Use pagination for list endpoints
  - Monitor response times and optimize slow queries

variables:
  DATABASE_URL: postgresql://localhost:5432/mydb
  JWT_SECRET: your-secret-key
  PORT: "3000"
